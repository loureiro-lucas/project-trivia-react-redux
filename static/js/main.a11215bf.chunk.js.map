{"version":3,"sources":["services/index.js","pages/Login.js","redux/actions/index.js","redux/actions/actionTypes.js","pages/Settings.js","pages/Game.js","pages/Feedback.js","pages/Ranking.js","components/Header.jsx","components/Layout.jsx","serviceWorker.js","redux/reducers/game.js","redux/reducers/index.js","redux/store/index.js","index.js","App.js","trivia.png"],"names":["fetchTokenTrivia","a","async","fetch","getToken","json","responseJson","token","fetchQuestionsTrivia","getQuestions","fetchCategories","getCategories","trivia_categories","fetchQuestionsWithPreferences","category","difficulty","type","chosenCategory","chosenDifficulty","chosenType","fetchQuestions","Login","props","state","name","email","nameError","emailError","handleSubmit","bind","handleChange","handleSettings","renderInputs","resetUser","this","setState","length","target","value","history","push","event","preventDefault","validateForm","localStorage","setItem","gravatarEmail","player","assertions","score","JSON","stringify","className","TextField","id","label","variant","size","onChange","error","helperText","required","src","logo","alt","noValidate","onSubmit","ButtonGroup","Button","color","endIcon","onClick","React","Component","connect","dispatch","Settings","categories","questionsType","renderCategoriesOptions","renderCategoriesSelect","renderDifficultySelect","renderTypeSelect","setPreferences","FormControl","fullWidth","InputLabel","Select","labelId","MenuItem","map","key","Typography","component","getSettings","Game","questions","index","randomAnswers","correctId","wrongId","isAnswersDisabled","counter","isButtonShow","intervalId","setQuestionsinState","createRandomArray","handleClickAnswer","setAnswerAsWrong","setTimeLimitToAnswer","handleClickNext","renderCounter","results","correct","correct_answer","incorrects","incorrect_answers","getItem","setInterval","current","correctAnswer","incorrectAnswers","answers","text","answer","randomArray","sort","Math","random","currentTarget","parse","currentScore","hard","medium","easy","currentAssertions","scoreStorage","updateScore","index2","clearInterval","LinearProgress","question","replace","disabled","returnNextButton","game","updateScoreAction","Feedback","restorePlayer","setRanking","userName","urlImage","currentRanking","newRankingEntry","picture","currentRankingArray","newRanking","phrase","returnFeedback","Ranking","ranking","getRanking","sortedRanking","rankingSorter","b","List","person","ListItem","divider","Avatar","Header","handleGravatarImage","hash","md5","toString","getGravatarImage","urlGravatarImage","saveName","styleClass","AppBar","position","Toolbar","url","useStyles","makeStyles","page","backgroundColor","headerTitle","flexGrow","paddingLeft","Layout","children","classes","Boolean","window","location","hostname","match","INITIAL_STATE","action","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","Cypress","ReactDOM","render","CssBaseline","exact","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.a11215bf.chunk.js","sourcesContent":["import md5 from 'crypto-js/md5';\n\nexport const fetchTokenTrivia = async () => {\n  const getToken = await fetch('https://opentdb.com/api_token.php?command=request');\n  const responseJson = await getToken.json();\n  return responseJson.token;\n};\n\nexport const fetchQuestionsTrivia = async (token) => {\n  const getQuestions = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n  const responseJson = await getQuestions.json();\n  return responseJson;\n};\n\nexport const getGravatarImage = (email) => {\n  const hash = md5(email).toString();\n  return `https://www.gravatar.com/avatar/${hash}`;\n};\n\nexport const fetchCategories = async () => {\n  const getCategories = await fetch('https://opentdb.com/api_category.php');\n  const responseJson = await getCategories.json();\n  return responseJson.trivia_categories;\n};\n\nexport const fetchQuestionsWithPreferences = (\n  async (category, difficulty, type, token) => {\n    const chosenCategory = category === '' ? category : `&category=${category}`;\n    const chosenDifficulty = difficulty === '' ? difficulty : `&difficulty=${difficulty}`;\n    const chosenType = type === '' ? type : `&type=${type}`;\n    const fetchQuestions = await fetch(`https://opentdb.com/api.php?amount=5${chosenCategory}${chosenDifficulty}${chosenType}&token=${token}`);\n    const responseJson = await fetchQuestions.json();\n    return responseJson;\n  });\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core//TextField';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport SportsEsportsIcon from '@material-ui/icons/SportsEsports';\nimport { fetchTokenTrivia } from '../services';\nimport { resetUserData } from '../redux/actions';\nimport './Login.css';\nimport logo from '../trivia.png';\n\nclass Login extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      name: '',\n      email: '',\n      nameError: false,\n      emailError: false,\n    };\n\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSettings = this.handleSettings.bind(this);\n    this.renderInputs = this.renderInputs.bind(this);\n  }\n\n  componentDidMount() {\n    const { resetUser } = this.props;\n    resetUser();\n  }\n\n  validateForm() {\n    const { name, email } = this.state;\n    this.setState({\n      nameError: false,\n      emailError: false,\n    });\n\n    if (name.length === 0) {\n      this.setState({ nameError: true });\n    }\n    if (email.length === 0) {\n      this.setState({ emailError: true });\n    }\n    if (name && email) {\n      return true;\n    } return false;\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  handleSettings() {\n    const { history } = this.props;\n    history.push('/settings');\n  }\n\n  async handleSubmit(event) {\n    event.preventDefault();\n\n    if (this.validateForm()) {\n      const token = await fetchTokenTrivia();\n      localStorage.setItem('token', token);\n\n      const { name, email: gravatarEmail } = this.state;\n      const player = {\n        player: {\n          name,\n          assertions: 0,\n          score: 0,\n          gravatarEmail,\n        },\n      };\n      localStorage.setItem('state', JSON.stringify(player));\n\n      const { history } = this.props;\n      history.push('/game');\n    }\n  }\n\n  renderInputs() {\n    const { name, email, nameError, emailError } = this.state;\n    return (\n      <div className=\"login-inputs\">\n        <TextField\n          id=\"input-player-name\"\n          name=\"name\"\n          label=\"Nome\"\n          variant=\"outlined\"\n          size=\"small\"\n          value={ name }\n          onChange={ this.handleChange }\n          error={ nameError }\n          helperText={ nameError && 'Campo obrigatório' }\n          required\n        />\n        <TextField\n          id=\"input-gravatar-email\"\n          name=\"email\"\n          label=\"Email\"\n          variant=\"outlined\"\n          size=\"small\"\n          type=\"email\"\n          value={ email }\n          onChange={ this.handleChange }\n          error={ emailError }\n          helperText={ emailError && 'Campo obrigatório' }\n          required\n        />\n      </div>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"login-form-container\">\n        <img src={ logo } alt=\"trivia-logo\" className=\"login-logo\" />\n\n        <form\n          noValidate\n          onSubmit={ this.handleSubmit }\n          className=\"login-form\"\n        >\n\n          { this.renderInputs() }\n\n          <div className=\"login-buttons\">\n            <ButtonGroup variant=\"contained\">\n              <Button\n                type=\"submit\"\n                color=\"primary\"\n                endIcon={ <SportsEsportsIcon /> }\n              >\n                Jogar\n              </Button>\n              <Button\n                color=\"secondary\"\n                onClick={ this.handleSettings }\n                endIcon={ <SettingsIcon /> }\n              >\n                Configurações\n              </Button>\n            </ButtonGroup>\n          </div>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  resetUser: () => dispatch(resetUserData()),\n});\n\nLogin.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  resetUser: PropTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import { UPDATE_SCORE,\n  SAVE_URL_IMAGE,\n  SAVE_USER_NAME,\n  RESET_DATA,\n  GET_PREFERENCES } from './actionTypes';\n\nexport const updateScoreAction = (score) => ({\n  type: UPDATE_SCORE,\n  score,\n});\n\nexport const saveGravatarUrlImage = (urlImage) => ({\n  type: SAVE_URL_IMAGE,\n  urlImage,\n});\n\nexport const saveUserName = (userName) => ({\n  type: SAVE_USER_NAME,\n  userName,\n});\n\nexport const resetUserData = () => ({\n  type: RESET_DATA,\n});\n\nexport const getSettings = ([category, difficulty, questionsType]) => ({\n  type: GET_PREFERENCES,\n  category,\n  difficulty,\n  questionsType,\n});\n","export const UPDATE_SCORE = 'UPDATE_SCORE';\nexport const SAVE_URL_IMAGE = 'SAVE_URL_IMAGE';\nexport const SAVE_USER_NAME = 'SAVE_USER_NAME';\nexport const RESET_DATA = 'RESET_DATA';\nexport const GET_PREFERENCES = 'GET_PREFERENCES';\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Select from '@material-ui/core/Select';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport DoneIcon from '@material-ui/icons/Done';\nimport { getSettings } from '../redux/actions';\nimport { fetchCategories } from '../services';\nimport './Settings.css';\n\nclass Settings extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      categories: [],\n      category: '',\n      difficulty: '',\n      questionsType: '',\n    };\n    this.renderCategoriesOptions = this.renderCategoriesOptions.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.renderCategoriesSelect = this.renderCategoriesSelect.bind(this);\n    this.renderDifficultySelect = this.renderDifficultySelect.bind(this);\n    this.renderTypeSelect = this.renderTypeSelect.bind(this);\n  }\n\n  componentDidMount() {\n    this.renderCategoriesOptions();\n  }\n\n  handleChange({ target: { name, value } }) {\n    this.setState({ [name]: value });\n  }\n\n  handleSubmit(event) {\n    event.preventDefault();\n    const { category, difficulty, questionsType } = this.state;\n    const { setPreferences } = this.props;\n    setPreferences([category, difficulty, questionsType]);\n    const { history } = this.props;\n    history.push('/');\n  }\n\n  async renderCategoriesOptions() {\n    const categories = await fetchCategories();\n    this.setState({\n      categories,\n    });\n  }\n\n  renderCategoriesSelect() {\n    const { categories, category } = this.state;\n    return (\n      <FormControl\n        variant=\"outlined\"\n        size=\"small\"\n        fullWidth=\"true\"\n      >\n        <InputLabel id=\"category\">Categorias</InputLabel>\n        <Select\n          labelId=\"category\"\n          id=\"category-select\"\n          name=\"category\"\n          label=\"Categorias\"\n          value={ category }\n          onChange={ this.handleChange }\n        >\n          <MenuItem value=\"\">Todas</MenuItem>\n          {categories.map(({ id, name }) => (\n            <MenuItem key={ id } value={ id }>{ name }</MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n    );\n  }\n\n  renderDifficultySelect() {\n    const { difficulty } = this.state;\n    return (\n      <FormControl\n        variant=\"outlined\"\n        size=\"small\"\n        fullWidth=\"true\"\n      >\n        <InputLabel id=\"difficulty\">Dificuldade</InputLabel>\n        <Select\n          labelId=\"difficulty\"\n          id=\"difficulty-select\"\n          name=\"difficulty\"\n          label=\"Dificuldade\"\n          value={ difficulty }\n          onChange={ this.handleChange }\n        >\n          <MenuItem value=\"\">Todas</MenuItem>\n          <MenuItem value=\"easy\">Easy</MenuItem>\n          <MenuItem value=\"medium\">Medium</MenuItem>\n          <MenuItem value=\"hard\">Hard</MenuItem>\n        </Select>\n      </FormControl>\n    );\n  }\n\n  renderTypeSelect() {\n    const { questionsType } = this.state;\n    return (\n      <FormControl\n        variant=\"outlined\"\n        size=\"small\"\n        fullWidth=\"true\"\n      >\n        <InputLabel id=\"questionsType\">Tipo de pergunta</InputLabel>\n        <Select\n          labelId=\"questionsType\"\n          id=\"questionsType-select\"\n          name=\"questionsType\"\n          label=\"Tipo de pergunta\"\n          value={ questionsType }\n          onChange={ this.handleChange }\n        >\n          <MenuItem value=\"\">Todos</MenuItem>\n          <MenuItem value=\"multiple\">Múltipla escolha</MenuItem>\n          <MenuItem value=\"boolean\">Verdadeiro ou falso</MenuItem>\n        </Select>\n      </FormControl>\n    );\n  }\n\n  render() {\n    return (\n      <div className=\"settings-container\">\n        <Typography variant=\"h4\" component=\"h1\">\n          Configurações\n        </Typography>\n        <form\n          noValidate\n          onSubmit={ this.handleSubmit }\n          className=\"settings-form\"\n        >\n          { this.renderCategoriesSelect() }\n          { this.renderDifficultySelect() }\n          { this.renderTypeSelect() }\n          <Button\n            variant=\"contained\"\n            type=\"submit\"\n            color=\"primary\"\n            endIcon={ <DoneIcon /> }\n          >\n            Salvar\n          </Button>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  setPreferences: (state) => dispatch(getSettings(state)),\n});\n\nSettings.propTypes = {\n  setPreferences: PropTypes.func.isRequired,\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(Settings);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport LinearProgress from '@material-ui/core/LinearProgress';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport NavigateNextRoundedIcon from '@material-ui/icons/NavigateNextRounded';\nimport { updateScoreAction } from '../redux/actions';\nimport { fetchQuestionsTrivia, fetchQuestionsWithPreferences } from '../services';\nimport './Game.css';\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      index: 0,\n      randomAnswers: [],\n      correctId: 'correct',\n      wrongId: 'wrong',\n      isAnswersDisabled: false,\n      counter: 30,\n      isButtonShow: false,\n      intervalId: '',\n    };\n    this.getQuestions = this.getQuestions.bind(this);\n    this.setQuestionsinState = this.setQuestionsinState.bind(this);\n    this.createRandomArray = this.createRandomArray.bind(this);\n    this.handleClickAnswer = this.handleClickAnswer.bind(this);\n    this.setAnswerAsWrong = this.setAnswerAsWrong.bind(this);\n    this.setTimeLimitToAnswer = this.setTimeLimitToAnswer.bind(this);\n    this.handleClickNext = this.handleClickNext.bind(this);\n    this.renderCounter = this.renderCounter.bind(this);\n  }\n\n  componentDidMount() {\n    this.getQuestions();\n    this.setTimeLimitToAnswer();\n  }\n\n  setQuestionsinState(results) {\n    const { index } = this.state;\n    this.setState({\n      questions: results,\n    });\n    const { correct_answer: correct,\n      incorrect_answers: incorrects } = results[index];\n    this.createRandomArray(correct, incorrects);\n  }\n\n  async getQuestions() {\n    const token = localStorage.getItem('token');\n    const { category, difficulty, type } = this.props;\n    if (category !== '' || difficulty !== '' || type !== '') {\n      const { results } = (\n        await fetchQuestionsWithPreferences(category, difficulty, type, token));\n      this.setQuestionsinState(results);\n    } else {\n      const { results } = await fetchQuestionsTrivia(token);\n      this.setQuestionsinState(results);\n    }\n  }\n\n  setAnswerAsWrong() {\n    this.setState({ isAnswersDisabled: true, isButtonShow: true });\n  }\n\n  setTimeLimitToAnswer() {\n    const SECOND = 1000;\n    const intervalId = setInterval(() => {\n      this.setState((current) => ({\n        counter: current.counter > 0 ? current.counter - 1 : 0,\n      }), () => {\n        const { counter } = this.state;\n        if (counter === 0) {\n          this.setAnswerAsWrong();\n        }\n      });\n    }, SECOND);\n    this.setState({ intervalId });\n  }\n\n  createRandomArray(correctAnswer, incorrectAnswers) {\n    const answers = [\n      { text: correctAnswer, type: 'correct' },\n      ...(incorrectAnswers\n        .map((answer, index) => ({ text: answer, type: 'wrong', index }))),\n    ];\n    const CHANGE_INDEX = -1;\n    const CONTROL_PROBABILITY = 0.5;\n    // Código baseado no link: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array resposta do usuário yuval.bl\n    const randomArray = answers.sort(() => (Math.random() > CONTROL_PROBABILITY\n      ? 1\n      : CHANGE_INDEX));\n    this.setState({ randomAnswers: randomArray });\n  }\n\n  handleClickAnswer({ currentTarget }) {\n    const points = { hard: 3, medium: 2, easy: 1 };\n    const { questions, index, counter } = this.state;\n    const { difficulty } = questions[index];\n    const { id } = currentTarget;\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    if (id === 'correct') {\n      const BASE_SCORE = 10;\n      const currentScore = player.score + BASE_SCORE + (counter * points[difficulty]);\n      const currentAssertions = player.assertions + 1;\n      const scoreStorage = JSON.stringify({ player: { ...player,\n        score: currentScore,\n        assertions: currentAssertions } });\n      localStorage.setItem('state', scoreStorage);\n      const { updateScore } = this.props;\n      updateScore(currentScore);\n    }\n    this.setState({\n      correctId: 'correct-answered',\n      wrongId: 'wrong-answered',\n      isButtonShow: true,\n    });\n  }\n\n  returnNextButton() {\n    return (\n      <Button\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={ this.handleClickNext }\n      >\n        Próxima pergunta\n        <NavigateNextRoundedIcon />\n      </Button>\n    );\n  }\n\n  handleClickNext() {\n    const { index, intervalId } = this.state;\n    const { history } = this.props;\n    const LAST_QUESTION = 4;\n    if (index === LAST_QUESTION) {\n      history.push('/feedback');\n    } else {\n      this.setState({\n        index: index + 1,\n        correctId: 'correct',\n        wrongId: 'wrong',\n        counter: 30,\n        isButtonShow: false,\n        isAnswersDisabled: false,\n      }, () => {\n        const { index: index2, questions } = this.state;\n        const { correct_answer: correct,\n          incorrect_answers: incorrects } = questions[index2];\n        this.createRandomArray(correct, incorrects);\n        this.setTimeLimitToAnswer();\n      });\n    }\n    clearInterval(intervalId);\n  }\n\n  renderCounter() {\n    const { counter } = this.state;\n    const SECONDS_TO_PERCENTAGE = 3.33;\n    return (\n      <div className=\"counter-container\">\n        <LinearProgress\n          variant=\"determinate\"\n          color=\"secondary\"\n          value={ counter * SECONDS_TO_PERCENTAGE }\n        />\n        <Typography\n          variant=\"h5\"\n          color=\"secondary\"\n          id=\"counter-text\"\n        >\n          {counter}\n        </Typography>\n      </div>\n    );\n  }\n\n  render() {\n    const {\n      questions,\n      index,\n      randomAnswers,\n      correctId,\n      wrongId,\n      isAnswersDisabled,\n      isButtonShow,\n    } = this.state;\n    return (\n      <div className=\"game-page-container\">\n        { questions.length > 0\n        && (\n          <>\n            { this.renderCounter() }\n            <Typography variant=\"overline\" id=\"question-category\">\n              Categoria:\n              { ` ${questions[index].category}` }\n            </Typography>\n            <div className=\"questions-container\">\n              <Typography variant=\"body1\">\n                { questions[index].question\n                  .replace(/&quot;/g, '\"').replace(/&#039;/g, '\\'') }\n              </Typography>\n              <div className=\"buttons-container\">\n                <ButtonGroup variant=\"contained\" size=\"small\">\n                  {randomAnswers.map((answer) => (\n                    <Button\n                      key={ answer.text }\n                      id={ answer.type === 'correct' ? correctId : wrongId }\n                      onClick={ this.handleClickAnswer }\n                      disabled={ isAnswersDisabled }\n                    >\n                      { answer.text.replace(/&quot;/g, '\"') }\n                    </Button>\n                  ))}\n                </ButtonGroup>\n              </div>\n            </div>\n            { isButtonShow && this.returnNextButton() }\n          </>\n        )}\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  history: PropTypes.shape({\n    push: PropTypes.func,\n  }).isRequired,\n  updateScore: PropTypes.func.isRequired,\n  category: PropTypes.string.isRequired,\n  difficulty: PropTypes.string.isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = ({ game }) => ({\n  category: game.category,\n  difficulty: game.difficulty,\n  type: game.type,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  updateScore: (score) => dispatch(updateScoreAction(score)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Typography from '@material-ui/core/Typography';\nimport Button from '@material-ui/core/Button';\nimport ButtonGroup from '@material-ui/core/ButtonGroup';\nimport FormatListNumberedRoundedIcon from '@material-ui/icons/FormatListNumberedRounded';\nimport ReplayRoundedIcon from '@material-ui/icons/ReplayRounded';\nimport './Feedback.css';\n\nclass Feedback extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      assertions: 0,\n      score: 0,\n    };\n    this.restorePlayer = this.restorePlayer.bind(this);\n  }\n\n  componentDidMount() {\n    this.restorePlayer();\n    this.setRanking();\n  }\n\n  setRanking() {\n    const { userName, urlImage, score } = this.props;\n    const currentRanking = localStorage.getItem('ranking');\n    const newRankingEntry = { name: userName, score, picture: urlImage };\n    if (currentRanking === null) {\n      localStorage.setItem('ranking', JSON.stringify([newRankingEntry]));\n    } else {\n      const currentRankingArray = JSON.parse(currentRanking);\n      const newRanking = [...currentRankingArray, newRankingEntry];\n      localStorage.setItem('ranking', JSON.stringify(newRanking));\n    }\n  }\n\n  restorePlayer() {\n    const { player } = JSON.parse(localStorage.getItem('state'));\n    this.setState({ score: player.score, assertions: player.assertions });\n  }\n\n  returnFeedback(phrase) {\n    const { score, assertions } = this.state;\n    const { history } = this.props;\n    return (\n      <div className=\"feedback-inside-container\">\n        <Typography\n          variant=\"h6\"\n        >\n          { phrase }\n        </Typography>\n        <Typography\n          variant=\"subtitle1\"\n          className=\"score-feedback\"\n        >\n          { `Você acertou ${assertions} ${assertions === 1 ? 'questão' : 'questões'},` }\n          <br />\n          { ` um total de ${score} ${score === 1 ? 'ponto' : 'pontos'}!` }\n        </Typography>\n        <ButtonGroup\n          variant=\"contained\"\n        >\n          <Button\n            color=\"primary\"\n            onClick={ () => history.push('/ranking') }\n            id=\"open-ranking-button\"\n          >\n            Ver Ranking\n            <FormatListNumberedRoundedIcon />\n          </Button>\n          <Button\n            color=\"primary\"\n            onClick={ () => history.push('/') }\n            id=\"play-again-btn\"\n          >\n            Jogar Novamente\n            <ReplayRoundedIcon />\n          </Button>\n        </ButtonGroup>\n      </div>\n    );\n  }\n\n  render() {\n    const MIN_QUESTIONS = 3;\n    const { assertions } = this.state;\n    return (\n      <div className=\"feedback-container\">\n        { assertions < MIN_QUESTIONS\n          ? (\n            this.returnFeedback('Podia ser melhor...')\n          )\n          : (\n            this.returnFeedback('Mandou bem!')\n          )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ game: { userName, urlImage, score } }) => ({\n  userName,\n  urlImage,\n  score,\n});\n\nFeedback.propTypes = {\n  userName: PropTypes.string.isRequired,\n  urlImage: PropTypes.string.isRequired,\n  score: PropTypes.number.isRequired,\n  history: PropTypes.objectOf(PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n    PropTypes.object,\n  ])).isRequired,\n};\n\nexport default connect(mapStateToProps)(Feedback);\n","import React from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport Button from '@material-ui/core/Button';\nimport ReplayRoundedIcon from '@material-ui/icons/ReplayRounded';\nimport PropTypes from 'prop-types';\nimport './Ranking.css';\n\nclass Ranking extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      ranking: [],\n    };\n\n    this.getRanking = this.getRanking.bind(this);\n  }\n\n  componentDidMount() {\n    this.getRanking();\n  }\n\n  getRanking() {\n    const ranking = JSON.parse(localStorage.getItem('ranking'));\n    const sortedRanking = this.rankingSorter(ranking);\n    this.setState({\n      ranking: sortedRanking,\n    });\n  }\n\n  rankingSorter(ranking) {\n    return ranking.sort((a, b) => b.score - a.score);\n  }\n\n  render() {\n    const { ranking } = this.state;\n    const { history } = this.props;\n    return (\n      <div>\n        <Typography variant=\"h3\" component=\"h1\" className=\"ranking-title\">\n          Ranking\n        </Typography>\n        <List id=\"ranking-container\">\n          { ranking.map((person, index) => (\n            <ListItem\n              key={ index }\n              className=\"ranking-person\"\n              divider\n            >\n              <Avatar\n                src={ person.picture }\n                alt=\"ranking person\"\n              />\n              <Typography variant=\"h6\" component=\"p\" className=\"ranking-person-name\">\n                { person.name }\n              </Typography>\n              <Typography\n                variant=\"h6\"\n                component=\"p\"\n                color=\"primary\"\n              >\n                {person.score}\n              </Typography>\n              <Typography variant=\"body\">\n                { person.score === 1 ? 'ponto' : 'pontos' }\n              </Typography>\n            </ListItem>\n          )) }\n          <Button\n            variant=\"contained\"\n            color=\"primary\"\n            onClick={ () => history.push('/') }\n            id=\"play-again-button\"\n          >\n            Jogar Novamente\n            <ReplayRoundedIcon />\n          </Button>\n        </List>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  history: PropTypes.objectOf(PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.func,\n    PropTypes.object,\n  ])).isRequired,\n};\n\nexport default Ranking;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport Avatar from '@material-ui/core/Avatar';\nimport { saveGravatarUrlImage, saveUserName } from '../redux/actions';\nimport { getGravatarImage } from '../services';\n\nclass Header extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleGravatarImage = this.handleGravatarImage.bind(this);\n  }\n\n  componentDidMount() {\n    this.handleGravatarImage();\n  }\n\n  handleGravatarImage() {\n    const getStateStorage = JSON.parse(localStorage.getItem('state'));\n    const { player: { gravatarEmail, name } } = getStateStorage;\n    const urlImage = getGravatarImage(gravatarEmail);\n    const { urlGravatarImage, saveName } = this.props;\n    urlGravatarImage(urlImage);\n    saveName(name);\n  }\n\n  render() {\n    const { urlImage, userName, score, styleClass } = this.props;\n    return (\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Avatar\n            src={ urlImage }\n            alt=\"profile-img\"\n          />\n          <Typography variant=\"h6\" className={ styleClass }>\n            { userName }\n          </Typography>\n          <Typography>\n            { score }\n            {' '}\n            pontos!\n          </Typography>\n        </Toolbar>\n      </AppBar>\n    );\n  }\n}\n\nconst mapStateToProps = ({ game: { score, urlImage, userName } }) => ({\n  score,\n  urlImage,\n  userName,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  urlGravatarImage: (url) => dispatch(saveGravatarUrlImage(url)),\n  saveName: (name) => dispatch(saveUserName(name)),\n});\n\nHeader.propTypes = {\n  score: PropTypes.number.isRequired,\n  urlImage: PropTypes.string.isRequired,\n  userName: PropTypes.string.isRequired,\n  urlGravatarImage: PropTypes.func.isRequired,\n  saveName: PropTypes.func.isRequired,\n  styleClass: PropTypes.string.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Header);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { makeStyles } from '@material-ui/core/node_modules/@material-ui/styles';\nimport Header from './Header';\n\nconst useStyles = makeStyles({\n  page: {\n    backgroundColor: '#f9f9f9',\n  },\n  headerTitle: {\n    flexGrow: 1,\n    paddingLeft: '24px',\n  },\n});\n\nfunction Layout({ children }) {\n  const classes = useStyles();\n  return (\n    <>\n      <Header styleClass={ classes.headerTitle } />\n      <div className={ classes.page }>\n        { children }\n      </div>\n    </>\n  );\n}\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default Layout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { UPDATE_SCORE,\n  SAVE_URL_IMAGE,\n  SAVE_USER_NAME,\n  RESET_DATA,\n  GET_PREFERENCES } from '../actions/actionTypes';\n\nconst INITIAL_STATE = {\n  score: 0,\n  urlImage: '',\n  userName: '',\n  category: '',\n  difficulty: '',\n  type: '',\n};\n\nconst game = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case UPDATE_SCORE:\n    return ({\n      ...state,\n      score: action.score,\n    });\n  case SAVE_URL_IMAGE:\n    return ({\n      ...state,\n      urlImage: action.urlImage,\n    });\n  case SAVE_USER_NAME:\n    return ({\n      ...state,\n      userName: action.userName,\n    });\n  case RESET_DATA:\n    return ({\n      ...state,\n      score: 0,\n      urlImage: '',\n      userName: '',\n    });\n  case GET_PREFERENCES:\n    return ({\n      ...state,\n      category: action.category,\n      difficulty: action.difficulty,\n      type: action.questionsType,\n    });\n  default:\n    return state;\n  }\n};\n\nexport default game;\n","import { combineReducers } from 'redux';\nimport game from './game';\n\nconst rootReducer = combineReducers({ game });\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './redux/store';\n\nReactDOM.render(\n  <BrowserRouter>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport './App.css';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport Game from './pages/Game';\nimport Feedback from './pages/Feedback';\nimport Ranking from './pages/Ranking';\nimport Layout from './components/Layout';\n\nexport default function App() {\n  return (\n    <>\n      <CssBaseline />\n      <Switch>\n        <Route exact path=\"/\" render={ (props) => <Login { ...props } /> } />\n        <Route path=\"/settings\" component={ Settings } />\n        <Layout>\n          <Route path=\"/game\" component={ Game } />\n          <Route path=\"/feedback\" render={ (props) => <Feedback { ...props } /> } />\n          <Route path=\"/ranking\" render={ (props) => <Ranking { ...props } /> } />\n        </Layout>\n      </Switch>\n    </>\n  );\n}\n","module.exports = __webpack_public_path__ + \"static/media/trivia.466d153e.png\";"],"sourceRoot":""}